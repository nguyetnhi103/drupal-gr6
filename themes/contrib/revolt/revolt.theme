<?php

/**
 * @file
 * Functions to support theming in the VT theme.
 */

use Drupal\Component\Render\MarkupInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;

/**
 * Implements theme_preprocess_page().
 */
function revolt_preprocess_page(&$variables) {
  // Banner variables.
  $variables['banner_display'] = theme_get_setting('banner_display');
  $variables['banner_align'] = theme_get_setting('banner_align');
  $variables['banner_title'] = theme_get_setting('banner_title');
  $variables['banner_desc'] = theme_get_setting('banner_desc');
  $banner_image = theme_get_setting('banner_image');
  $variables['banner_url_title'] = theme_get_setting('banner_url_title');
  $variables['banner_url'] = theme_get_setting('banner_url');
  if (!empty($banner_image)) {
    $file = File::load($banner_image[0]);
    if (!empty($file)) {
      $uri = $file->getFileUri();
      $image_path = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
    }else {
      $image_path = \Drupal::theme()->getActiveTheme()->getPath() . '/images/banner.jpeg';
    }
  }else {
    $image_path = \Drupal::theme()->getActiveTheme()->getPath() . '/images/banner.jpeg';
  }
  $variables['image_path'] = $image_path;

  // Header setting variables.
  $variables['stickey_header'] = theme_get_setting('stickey_header');
  $variables['header_background'] = theme_get_setting('header_background');
  $variables['header_width'] = theme_get_setting('header_width');
  $variables['header_class'] = theme_get_setting('header_class');
  // dd($variables['header_class']);.
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function revolt_preprocess_views_view_fields(&$variables) {
  $view = $variables['view'];
  // Loop through the fields for this view.
  $previous_inline = FALSE;
  // Ensure it's at least an empty array.
  $variables['fields'] = [];
  /** @var \Drupal\views\ResultRow $row */
  $row = $variables['row'];
  foreach ($view->field as $id => $field) {
    // Render this even if set to exclude so it can be used elsewhere.
    $field_output = $view->style_plugin->getField($row->index, $id);
    $empty = $field->isValueEmpty($field_output, $field->options['empty_zero']);
    if (empty($field->options['exclude']) && (!$empty || (empty($field->options['hide_empty']) && empty($variables['options']['hide_empty'])))) {
      $object = new stdClass();
      $object->handler = $view->field[$id];
      $object->inline = !empty($variables['options']['inline'][$id]);
      // Set up default value of the flag that indicates whether to display a
      // colon after the label.
      $object->has_label_colon = FALSE;

      $object->element_type = $object->handler->elementType(TRUE, !$variables['options']['default_field_elements'], $object->inline);
      if ($object->element_type) {
        $attributes = [];
        if ($object->handler->options['element_default_classes']) {
          $attributes['class'][] = 'vt-field-content';
        }

        if ($classes = $object->handler->elementClasses($row->index)) {
          $attributes['class'][] = $classes;
        }
        $object->element_attributes = new Attribute($attributes);
      }

      $object->content = $field_output;
      if (isset($view->field[$id]->field_alias) && isset($row->{$view->field[$id]->field_alias})) {
        $object->raw = $row->{$view->field[$id]->field_alias};
      }
      else {
        // Make sure it exists to reduce NOTICE.
        $object->raw = NULL;
      }

      if (!empty($variables['options']['separator']) && $previous_inline && $object->inline && $object->content) {
        $object->separator = [
          '#markup' => $variables['options']['separator'],
        ];
      }

      $object->class = Html::cleanCssIdentifier($id);

      $previous_inline = $object->inline;
      // Set up field wrapper element.
      $object->wrapper_element = $object->handler->elementWrapperType(TRUE, TRUE);
      if ($object->wrapper_element === '' && $variables['options']['default_field_elements']) {
        $object->wrapper_element = $object->inline ? 'span' : 'div';
      }

      // Set up field wrapper attributes if field wrapper was set.
      if ($object->wrapper_element) {
        $attributes = [];
        if ($object->handler->options['element_default_classes']) {
          $attributes['class'][] = 'vt-views-field';
          $attributes['class'][] = 'vt-views-field-' . $object->class;
        }

        if ($classes = $object->handler->elementWrapperClasses($row->index)) {
          $attributes['class'][] = $classes;
        }
        $object->wrapper_attributes = new Attribute($attributes);
      }

      // Set up field label.
      $object->label = $view->field[$id]->label();

      // Set up field label wrapper and its attributes.
      if ($object->label) {
        // Add a colon in a label suffix.
        if ($object->handler->options['element_label_colon']) {
          $object->label_suffix = ': ';
          $object->has_label_colon = TRUE;
        }

        // Set up label HTML element.
        $object->label_element = $object->handler->elementLabelType(TRUE, !$variables['options']['default_field_elements']);

        // Set up label attributes.
        if ($object->label_element) {
          $attributes = [];
          if ($object->handler->options['element_default_classes']) {
            $attributes['class'][] = 'vt-views-label';
            $attributes['class'][] = 'vt-views-label-' . $object->class;
          }

          // Set up field label.
          $element_label_class = $object->handler->elementLabelClasses($row->index);
          if ($element_label_class) {
            $attributes['class'][] = $element_label_class;
          }
          $object->label_attributes = new Attribute($attributes);
        }
      }

      $variables['fields'][$id] = $object;
    }
  }
}

/**
 * Implements hook_preprocess_views_view_list() for page templates.
 */
function revolt_preprocess_views_view_list(&$variables) {
  $variables['attributes']['class'][0] = 'vt-view-items-lists';
  if (empty($variables['list']['attributes'])) {
    $variables['list']['attributes'] = new Attribute();
  }
  $variables['list']['attributes']->addClass('vt-view-items');
  foreach ($variables['rows'] as $row) {
    $row['attributes']['class'] = 'vt-view-item';
  }
}

/**
 * Implements hook_preprocess_views_view_list() for page templates.
 */
function revolt_preprocess_views_view_table(&$variables) {
  foreach ($variables['rows'] as $row) {
    $row['attributes']['class'] = 'vt-table-row';
  }
  // dd($variables);
}

/**
 * Implements hook_preprocess_HOOK() for form elements.
 */
function revolt_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }

  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
}

